 
OPT_STMTS

   OPT->STMTS: DEBUG --> 32
STMT_LST
STMT
32
ID := EXPR
  EXPR
TERM -> LEC ACTUAL: 1
FACTOR -> 1 x := 3
TERM -> FACTOR
DEBUGG TERM: 12
PALABRA VACIA EN TERM PRIMA 12
REGRESA A TERM
EXPR DEBBUG 12
--> REGRESA DE EXPR PRIMA  A EXPR
--> De EXPR a STMT?
EXPR EN STMT PARA END: 12
DEBUGG stmt_lst: 12

   stmt prima prueba para terminar recursividad 35
STMT
35
IF EXPRESION THE STMT STMT'
 EXPRESON: 32
EXPR
TERM -> LEC ACTUAL: 32
FACTOR -> 32 x
TERM -> FACTOR
 DEBUGG TERM: 19
PALABRA VACIA EN TERM PRIMA 19
REGRESA A TERM
EXPR DEBBUG 19
--> REGRESA DE EXPR PRIMA  A EXPR
--> De EXPR a STMT?
lectura expr: 19
DEBUGG SIGNO EXPR: 19
 EXPR
TERM -> LEC ACTUAL: 1
FACTOR -> 1 x > 4
TERM -> FACTOR
 DEBUGG TERM: 36
PALABRA VACIA EN TERM PRIMA 36
REGRESA A TERM
EXPR DEBBUG 36
--> REGRESA DE EXPR PRIMA  A EXPR
--> De EXPR a STMT?
PASA EXPR EXPRESSION !!!!!!!!!!!!!!
PASA EXPRESION -->->->->->-<->
Expression en lectura: 36

   ADADSAASDADS: 33
STMT
33
LLEGA A BEGIN
OPT_STMTS

      OPT->STMTS: DEBUG --> 32
STMT_LST
STMT
32
ID := EXPR
  EXPR
TERM -> LEC ACTUAL: 32
FACTOR -> 32 x
TERM -> FACTOR
 DEBUGG TERM: 3
PALABRA VACIA EN TERM PRIMA 3
REGRESA A TERM
EXPR DEBBUG 3
--> REGRESA DE EXPR PRIMA  A EXPR
EXPR' -> SUMA | RESTA
 
expr' lectura --> 1
TERM -> LEC ACTUAL: 1
FACTOR -> 1 x + 1
TERM -> FACTOR
DEBUGG TERM: 12
PALABRA VACIA EN TERM PRIMA 12
-->EXPR PRIMA --> 12
ENTRA CONDICIONAL EXPR PRIMA PARA END
TERMINA EXPRPRIMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
EXPR EN STMT PARA END: 12
DEBUGG stmt_lst: 12

      stmt prima prueba para terminar recursividad 32
STMT
32
ID := EXPR
  EXPR
TERM -> LEC ACTUAL: 32
FACTOR -> 32 x
TERM -> FACTOR
 DEBUGG TERM: 5
Term Prima -> 5
 FACTOR -> 32 y
-->PASA FACTOR TERM' 32
Term Prima -> 32

   REGRESA A TERM
EXPR DEBBUG 34
--> REGRESA DE EXPR PRIMA  A EXPR
--> De EXPR a STMT?
EXPR EN STMT PARA END: 34
1 DEBUGG STMT_LST': 34

   PASA AL FINAL DE STMT_LST PRIMA : 37
No debe de llegar hasta aqui
No debe de llegar hasta aqui
PASA AL FINAL DE STMT_LST PRIMA : 37
